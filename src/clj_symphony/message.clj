;
; Copyright Â© 2017 Symphony Software Foundation
; SPDX-License-Identifier: Apache-2.0
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

(ns clj-symphony.message
  "Operations related to messages.  Currently, Symphony supports these message formats:
  1. plain text
  2. messageML, which supports a small number of formatting tags
  3. MessageMLv2 (coming soon - stay tuned!)"
  (:require [clojure.string      :as s]
            [clj-symphony.user   :as syu]
            [clj-symphony.stream :as sys]
            [clj-symphony.chat   :as sych]))


(defn msgobj->map
  "Converts a SymMessage object into a map."
  [^org.symphonyoss.symphony.clients.model.SymMessage message]
  (if message
    {
      :message-id (.getId          message)
      :timestamp  (java.util.Date. (Long/valueOf (.getTimestamp message)))
      :stream-id  (.getStreamId    message)
      :user-id    (.getFromUserId  message)
      :format     (when-not (nil? (.getFormat message))
                    (keyword (str (.getFormat message))))
      :type       (.getMessageType message)   ; This seems to be null or blank most of the time...
      :text       (.getMessage     message)
    }))


(defn- ^org.symphonyoss.symphony.clients.model.SymMessage build-sym-message
  [^String message]
  (let [msg (doto
              (org.symphonyoss.symphony.clients.model.SymMessage.)
              (.setMessage message))]
    (if (.startsWith message "<messageML>")
      (.setFormat msg org.symphonyoss.symphony.clients.model.SymMessage$Format/MESSAGEML)
      (.setFormat msg org.symphonyoss.symphony.clients.model.SymMessage$Format/TEXT))
    msg))


(defmulti send-message!
  "Sends the given message (a String) to the given target (chat, room, or stream)."
  (fn [connection target message] (type target)))

(defmethod send-message! nil
  [connection target message]
  nil)

(defmethod send-message! org.symphonyoss.client.model.Chat
  [^org.symphonyoss.client.SymphonyClient connection ^org.symphonyoss.client.model.Chat chat ^String message]
  (.sendMessage (.getMessageService connection)
                chat
                (build-sym-message message))
  nil)

(defmethod send-message! org.symphonyoss.client.model.Room
  [^org.symphonyoss.client.SymphonyClient connection ^org.symphonyoss.client.model.Room room ^String message]
  (.sendMessage (.getMessageService connection)
                room
                (build-sym-message message))
  nil)

(defmethod send-message! String
  [^org.symphonyoss.client.SymphonyClient connection ^String stream-id ^String message]
  (let [stream (org.symphonyoss.symphony.pod.model.Stream.)
        _      (.setId stream stream-id)]
    (.sendMessage (.getMessagesClient connection)
                  stream
                  (build-sym-message message))
    nil))

(defmethod send-message! java.util.Map
  [connection {:keys [stream-id]} message]
  (if stream-id
    (send-message! connection stream-id message)))


(defn register-listener
  "Registers f, a function with 1 parameter, as a message listener (callback), and returns a handle to that listener
so that it can be deregistered later on, if needed.  Listeners registered in this manner are not scoped to any
particular stream - they will be sent all messages from all streams that the authenticated connection user is a
participant in.

The argument passed to f is a map generated by msgobj->map (see that fn for details).

The value returned by f (if any) is ignored."
  [^org.symphonyoss.client.SymphonyClient connection f]
  (let [listener (reify
                   org.symphonyoss.client.services.MessageListener
                   (onMessage [this msg]
                    (f (msgobj->map msg))))]
    (.addMessageListener (.getMessageService connection) listener)
    listener))


(defn deregister-listener
  "Deregisters a previously-registered message listener.  Once deregistered, a listener should be discarded (they cannot be used again).
Returns true if a valid message listener was deregistered, false otherwise."
  [^org.symphonyoss.client.SymphonyClient connection ^org.symphonyoss.client.services.MessageListener listener]
  (.removeMessageListener (.getMessageService connection) listener))
